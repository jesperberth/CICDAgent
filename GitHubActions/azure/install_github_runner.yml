---
- name: Deploy GitHub Runner or Azure DevOpsAgent
  hosts: tag_environment_githubrunner

  vars:
    resource_group: KeyVault
    vault_name: jesbedeployment
    ansible_python_interpreter: "auto"
    user: "{{ ansible_user_id }}"
    setup_devops: false
    setup_github: true
    setup_standard: true
    setup_docker: false
    setup_ansible: false
    setup_azure: false
    githubaccount: jesperberth
    repo: GitOpsDemo

  tasks:
    - name: Get Key Vault by name
      azure.azcollection.azure_rm_keyvault_info:
        resource_group: "{{ resource_group }}"
        name: "{{ vault_name }}"
      register: keyvault
      delegate_to: localhost

    - name: Set key vault URI fact
      ansible.builtin.set_fact:
        keyvaulturi: "{{ keyvault['keyvaults'][0]['vault_uri'] }}"
      delegate_to: localhost

    - name: Get secret GitHub PAT
      azure.azcollection.azure_rm_keyvaultsecret_info:
        vault_uri: "{{ keyvaulturi }}"
        name: GitHubPAT
      register: githubpatsecret
      delegate_to: localhost

    - name: Set GitHub PAT fact
      ansible.builtin.set_fact:
        gitpatsecret: "{{ githubpatsecret['secrets'][0]['secret'] }}"
      delegate_to: localhost

    - name: Get secret azureclientid
      azure.azcollection.azure_rm_keyvaultsecret_info:
        vault_uri: "{{ keyvaulturi }}"
        name: azureclientid
      register: azureclientidsecret
      delegate_to: localhost

    - name: Set azureclientid fact
      ansible.builtin.set_fact:
        azureclientid: "{{ azureclientidsecret['secrets'][0]['secret'] }}"
      delegate_to: localhost

    - name: Get secret azuresecret
      azure.azcollection.azure_rm_keyvaultsecret_info:
        vault_uri: "{{ keyvaulturi }}"
        name: azuresecret
      register: azuresecretsecret
      delegate_to: localhost

    - name: Set azuresecret fact
      ansible.builtin.set_fact:
        azuresecret: "{{ azuresecretsecret['secrets'][0]['secret'] }}"
      delegate_to: localhost

    - name: Get secret azuresubid
      azure.azcollection.azure_rm_keyvaultsecret_info:
        vault_uri: "{{ keyvaulturi }}"
        name: azuresubid
      register: azuresubidsecret
      delegate_to: localhost

    - name: Set azuresubid fact
      ansible.builtin.set_fact:
        azuresubid: "{{ azuresubidsecret['secrets'][0]['secret'] }}"
      delegate_to: localhost

    - name: Get secret azuretenant
      azure.azcollection.azure_rm_keyvaultsecret_info:
        vault_uri: "{{ keyvaulturi }}"
        name: azuretenant
      register: azuretenantsecret
      delegate_to: localhost

    - name: Set azuretenant fact
      ansible.builtin.set_fact:
        azuretenant: "{{ azuretenantsecret['secrets'][0]['secret'] }}"
      delegate_to: localhost

    - name: Get secret server public key
      azure.azcollection.azure_rm_keyvaultsecret_info:
        vault_uri: "{{ keyvaulturi }}"
        name: server-key-pub
      register: serverpublickeysecret
      delegate_to: localhost

    - name: Set serverpublickey fact
      ansible.builtin.set_fact:
        serverpublickey: "{{ serverpublickeysecret['secrets'][0]['secret'] }}"
      delegate_to: localhost

# - name: Install
#  hosts: tag_environment_githubrunner
#  vars:
#  tasks:

    - name: Install and Configure Azure DevOps Agent
      when: setup_devops
      block:
        - name: Create Folder DevOpsAgent
          ansible.builtin.file:
            path: ~/DevOpsAgent
            state: directory
            mode: "0775"

        - name: Download vsts-agent
          ansible.builtin.get_url:
            url: https://vstsagentpackage.azureedge.net/agent/2.190.0/vsts-agent-linux-x64-2.190.0.tar.gz
            dest: ~/DevOpsAgent/vsts-agent-linux-x64-2.190.0.tar.gz
            mode: "0660"

        - name: Extract DevOpsAgent
          ansible.builtin.unarchive:
            src: ~/DevOpsAgent/vsts-agent-linux-x64-2.190.0.tar.gz
            dest: ~/DevOpsAgent
            remote_src: true

        - name: Check if agent is installed
          ansible.builtin.stat:
            path: ~/DevOpsAgent/svc.sh
          register: svcfile

        - name: Configure DevOpsAgent
          ansible.builtin.shell: |
            /home/{{ user }}/DevOpsAgent/config.sh --unattended --url https://dev.azure.com/{{ account }} \
            --auth pat --token {{ token }} --pool {{ pool }}  --acceptTeeEula
          when: not svcfile.stat.exists

        - name: Check if agent service is installed
          ansible.builtin.stat:
            path: /etc/systemd/system/vsts.agent.{{ account }}.{{ pool }}.{{ ansible_hostname }}.service
          register: servicefile

        - name: Configure DevOpsAgent as a Service
          ansible.builtin.shell: |
            cd /home/{{ user }}/DevOpsAgent
            ./svc.sh install
          become: true
          when: not servicefile.stat.exists

        - name: Start vsts agent
          ansible.builtin.systemd:
            name: vsts.agent.{{ account }}.{{ pool }}.{{ ansible_hostname }}.service
            state: started
          become: true

    - name: Install and Configure GitHub Runner
      when: setup_github
      block:
        - name: Install Standard packages
          ansible.builtin.apt:
            name:
              - jq
            state: present
            update_cache: true
          become: true

        - name: Check if runner is installed
          ansible.builtin.stat:
            path: ~/runner/svc.sh
          register: svcfile

        - name: Check if runner service is installed
          ansible.builtin.stat:
            path: /etc/systemd/system/actions.runner.{{ githubaccount }}-{{ repo }}.{{ ansible_hostname }}.service
          register: servicefile

        - name: Set gitpatsecret facts
          ansible.builtin.set_fact:
            gitpatsecret: "{{ hostvars['localhost']['gitpatsecret'] }}"

        - name: Get GitHub runner url
          ansible.builtin.shell: |
            latest_version_label=$(curl -s -X GET 'https://api.github.com/repos/actions/runner/releases/latest' | jq -r '.tag_name')
            latest_version=$(echo $latest_version_label | sed 's/^v//')
            runner_file="actions-runner-linux-x64-${latest_version}.tar.gz"
            runner_url="https://github.com/actions/runner/releases/download/${latest_version_label}/${runner_file}"
            echo $runner_url
          register: runner_url

        - name: Download latest GitHub runner
          ansible.builtin.get_url:
            url: "{{ runner_url['stdout'] }}"
            dest: ~/runner_install.tar.gz
            mode: "0744"

        - name: Create Folder runner
          ansible.builtin.file:
            path: ~/runner
            state: directory
            mode: "0755"

        - name: Extract runner
          ansible.builtin.unarchive:
            src: ~/runner_install.tar.gz
            dest: ~/runner
            remote_src: true

        - name: Get runner token
          ansible.builtin.shell: |
            curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token {{ gitpatsecret }}" https://api.github.com/repos/{{ githubaccount }}/{{ repo }}/actions/runners/registration-token | jq -r '.token'
          register: runner_token

        - name: Configure Runner
          ansible.builtin.shell: |
            ~/runner/config.sh --unattended --url https://github.com/{{ githubaccount }}/{{ repo }} --token \
            {{ runner_token['stdout'] }} --name {{ ansible_hostname }}
          when: not svcfile.stat.exists

        - name: Configure runner as a Service
          ansible.builtin.shell: |
            cd /home/{{ user }}/runner
            ./svc.sh install {{ user }}
          become: true
          when: not servicefile.stat.exists

        - name: Start GitHub runner
          ansible.builtin.systemd:
            name: actions.runner.{{ githubaccount }}-{{ repo }}.{{ ansible_hostname }}.service
            state: started
          become: true

    - name: Install and Configure Standard packages
      when: setup_standard
      block:
        - name: Install Standard packages
          ansible.builtin.apt:
            name:
              - zip
              - unzip
            state: present
            update_cache: true
          become: true

        - name: Set public key facts
          ansible.builtin.set_fact:
            serverpublickey: "{{ hostvars['localhost']['serverpublickey'] }}"

        - name: Create server-key public
          ansible.builtin.lineinfile:
            path: ~/.ssh/server-key.pub
            search_string: "{{ serverpublickey }}"
            line: "{{ serverpublickey }}"
            mode: '0644'
            create: true

    - name: Install and Configure Ansible
      when: setup_ansible
      block:
        - name: Install packages for Ansible
          ansible.builtin.apt:
            name:
              - python3-pip
              - python3-winrm
            state: present
            update_cache: true
          become: true

        - name: Install ansible
          ansible.builtin.pip:
            name: ansible
          become: true

        - name: Install Azure requirements for Ansible
          ansible.builtin.pip:
            requirements: "/usr/local/lib/python3.8/dist-packages/ansible_collections/azure/azcollection/requirements-azure.txt"
          become: true

    - name: Install and Configure Docker
      when: setup_docker
      block:
        - name: Install packages for docker
          ansible.builtin.apt:
            name:
              - docker.io
            state: present
            update_cache: true
          become: true

        - name: Allow User to run docker
          ansible.builtin.user:
            name: "{{ user }}"
            group: docker
          become: true

    - name: Install and Configure Azure
      when: setup_azure
      block:
        - name: Create Folder .azure
          ansible.builtin.file:
            path: ~/.azure
            state: directory
            mode: "0600"

        - name: Set Credentials facts
          ansible.builtin.set_fact:
            azureclientid: "{{ hostvars['localhost']['azureclientid'] }}"
            azuresecret: "{{ hostvars['localhost']['azuresecret'] }}"
            azuresubid: "{{ hostvars['localhost']['azuresubid'] }}"
            azuretenant: "{{ hostvars['localhost']['azuretenant'] }}"

        - name: Add Credential file for Azure
          ansible.builtin.template:
            src: credentials.j2
            dest: ~/.azure/credentials
            mode: "0600"

        - name: Check if az cli is installed
          ansible.builtin.stat:
            path: /usr/bin/az
          register: azfile

        - name: Install packages for azure-cli
          ansible.builtin.shell: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          become: true
          when: not azfile.stat.exists

    - name: Restart DevOpsAgent
      ansible.builtin.reboot:
      become: true
